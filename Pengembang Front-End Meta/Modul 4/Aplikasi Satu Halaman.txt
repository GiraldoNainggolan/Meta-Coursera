Katakanlah Anda berpikir untuk membangun aplikasi web. Anda mungkin menginginkan pengalaman yang ramah pengguna dan ramah seluler. Maka Anda harus mempertimbangkan untuk menggunakan aplikasi satu halaman atau SPA untuk membangun pengalaman yang unik, cepat, dan menarik bagi pengguna Anda. Anda mungkin menggunakan banyak SPA setiap hari. Pikirkan jejaring sosial atau aplikasi perpesanan favorit Anda atau aplikasi peta yang Anda gunakan untuk menemukan bisnis lokal. Pengalaman pengguna hebat yang Anda dapatkan didorong oleh aplikasi satu halaman. Jadi, apa sebenarnya SPA itu? Bagaimana cara kerjanya? Apa bedanya dengan situs web tradisional? Pertama-tama mari kita jelajahi cara kerja situs web tradisional. Sebelum munculnya kerangka kerja JavaScript modern, sebagian besar situs web diimplementasikan sebagai aplikasi multi-halaman. Tetapi ini membuat sumber daya aplikasi tradisional intensif ke server web karena mengirim seluruh halaman web untuk setiap permintaan menghabiskan bandwidth yang berlebihan dan menggunakan waktu CPU untuk menghasilkan halaman dinamis. Jika situs web Anda rumit, pengalaman menjelajah situs mungkin tampak lambat bagi pengguna. Akan lebih lambat jika mereka memiliki koneksi internet yang buruk atau terbatas. Untuk mengatasi masalah ini, banyak pengembang web membangun aplikasi web mereka sebagai SPA. Ini disebut satu halaman, tetapi itu tidak berarti situs web Anda hanya memiliki satu halaman konten. Artinya hanya ada satu halaman HTML yang dikirim dari server ke browser, tetapi halaman itu akan memperbarui kontennya saat pengguna Anda berinteraksi dengan situs web Anda. SPA memungkinkan pengguna untuk berinteraksi dengan situs web tanpa aplikasi perlu mengunduh seluruh halaman web baru. Sebaliknya, ia menulis ulang halaman web saat ini saat pengguna berinteraksi dengannya. Hasilnya adalah pengalaman browsing yang terasa lebih cepat dan lebih responsif terhadap input pengguna. Ketika pengguna menavigasi ke aplikasi web di browser, server web mengembalikan sumber daya yang diperlukan untuk menjalankan aplikasi. SPA memiliki dua pendekatan untuk melayani kode dan sumber daya. Yang pertama disebut bundling, dan pendekatan kedua dikenal sebagai lazy loading atau code splitting. Dengan bundling, ketika browser meminta aplikasi, server mengembalikan dan memuat semua HTML, CSS, dan JavaScript yang diperlukan segera. Dengan lazy loading, browser meminta aplikasi dan server hanya mengembalikan HTML minimum, CSS, dan JavaScript yang diperlukan untuk memuat aplikasi. Sumber daya tambahan diunduh sesuai kebutuhan. Misalnya, ketika pengguna menavigasi bagian tertentu dari aplikasi, kedua pendekatan tersebut valid. Pilihannya tergantung pada ukuran, kompleksitas, dan persyaratan bandwidth aplikasi. Misalnya, dengan pendekatan bundling, jika aplikasi Anda rumit dan memiliki banyak sumber daya, bundel Anda akan tumbuh cukup besar dan membutuhkan waktu lama untuk diunduh. Anda bisa berakhir dengan situs yang lebih lambat dari aplikasi web tradisional. Mari kita jelajahi sebuah contoh. Bayangkan Anda memiliki situs yang didedikasikan untuk meninjau film, orang tidak pernah tahu apa yang harus ditonton selanjutnya sehingga Anda memutuskan untuk menginstal fitur yang secara acak menyarankan film untuk pengguna. Anda membuat halaman web yang memiliki tombol apa yang harus ditonton berikutnya. Anda ingin menampilkan nama film acak saat tombol diklik. Di situs web tradisional, ketika tombol diklik, browser akan mengirim permintaan posting ke server web. Server web mengembalikan halaman web baru yang berisi tombol dan nama film. Browser web kemudian membuat halaman baru. Dalam SPA, ketika tombol diklik, browser akan mengirim permintaan posting ke server web. Server web akan mengembalikan objek JSON. Aplikasi membaca objek dan pembaruan dengan menampilkan teks nama film. Itu lebih efisien karena sisa halaman tetap seperti semula dan kontennya tidak perlu dikirim oleh server dan dirender oleh browser. Tetapi bagaimana jika Anda perlu memperbarui sebagian besar halaman untuk menampilkan bentuk konten yang berbeda? Nah, mari kita jelajahi skenario itu. Misalkan Anda sedang membangun aplikasi web yang memiliki dua halaman. Satu halaman menampilkan berita terbaru dan halaman lainnya menunjukkan halaman profil pengguna saat ini. Bilah navigasi di bagian atas situs berisi tautan ke setiap halaman. Di situs web tradisional, ketika pengguna mengklik tautan profil, browser web mengirimkan permintaan ke server web. Server web menghasilkan seluruh halaman HTML dan mengirimkannya kembali ke browser web. Browser web kemudian membuat halaman web baru. Dalam aplikasi satu halaman, halaman yang berbeda dipecah menjadi templat, juga dikenal sebagai tampilan. Setiap tampilan akan memiliki kode HTML yang dapat diperbarui oleh aplikasi. Misalnya, halaman profil akan memiliki nama pengguna, nama depan, dan nama belakang. Browser web mengirimkan permintaan ke server web dan server web mengirimkan kembali file yang disebut JavaScript Object Notation atau objek JSON. Ini hanya berisi data yang akan ditampilkan, seperti nama depan dan nama belakang pengguna, dan SPA akan memperbarui HTML. Ini jauh lebih kecil daripada mengirim seluruh halaman web. Browser web kemudian memperbarui halaman web dengan memasukkan template dengan item diganti dengan nilai-nilai dalam objek JSON. Untuk situs web Anda berikutnya, pertimbangkan apakah kompleksitasnya sesuai dengan aplikasi multi-halaman tradisional atau akan berkinerja lebih baik sebagai SPA. Ingat bahwa aplikasi satu halaman memiliki dua metode sumber daya pengiriman. Menyampaikan semua sumber daya dengan segera atau mengirimkan sumber daya secara dinamis sesuai kebutuhan. Jika semua sumber daya dikirimkan saat aplikasi dimuat, aplikasi satu halaman harus menyertakan tampilan untuk setiap halaman pada pemuatan awal. Jika sumber daya dimuat secara dinamis, aplikasi satu halaman meminta tampilan sebagaimana diperlukan dan menyimpan tampilan di browser untuk permintaan berikutnya. Sekarang Anda dapat membandingkan beberapa situs web SPA populer dengan yang tradisional dan menilai perbedaan kinerja untuk diri Anda sendiri.