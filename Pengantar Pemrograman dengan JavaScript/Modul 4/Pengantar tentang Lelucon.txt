Pada tahap ini, Anda mungkin akrab dengan konsep pengujian kode Anda untuk memastikannya berfungsi seperti yang Anda inginkan. Anda mungkin juga menemukan beberapa sintaks kerangka pengujian. Tetapi bagaimana dengan bahasa seperti JavaScript yang tidak memiliki fungsionalitas pengujian bawaan? Untuk JavaScript, Anda dapat menggunakan kerangka pengujian seperti Jest. Selama beberapa menit ke depan, saya akan memperkenalkan Anda pada fitur- fitur kerangka kerja Jest, cakupan kode, ejekan, dan pengujian snapshot. Ini cukup suap. Mari kita mulai. JavaScript tidak memiliki objek atau metode bawaan yang memungkinkan pengujian ditulis. Oleh karena itu, banyak perpustakaan yang berbeda telah dibangun untuk mengatasi masalah pengujian. Beberapa contoh perpustakaan ini termasuk Jasmine, Mocha, Karma, dan QUnit. Lalu ada yang akan Anda bahas sekarang, yaitu kerangka pengujian Jest. Jest adalah kerangka pengujian JavaScript. Ini sering digunakan untuk menguji kode seperti React, pustaka JavaScript yang dikelola oleh Meta dan komunitas pengembang individu dan perusahaan. Selain JavaScript biasa dan kode React hanya memungkinkan Anda untuk menguji Babel, TypeScript, Node, Angular, Vue, dan berbagai kerangka kerja lainnya. Jest juga mendukung cakupan kode. Cakupan kode adalah ukuran berapa persentase kode saya yang dicakup oleh pengujian. Jika saya mengatakan bahwa saya memiliki cakupan kode 80 persen, itu berarti bahwa hanya seperlima dari seluruh basis kode saya yang tidak tercakup oleh pengujian. Tetapi bahkan cakupan kode 100 persen tidak berarti bahwa Anda telah menguji setiap harapan yang mungkin. Itu hanya berarti bahwa ada beberapa harapan yang diuji untuk setiap baris kode saya. Namun, cakupan kode adalah alat praktis untuk mengukur jumlah basis kode saya yang disertakan dalam pengujian. Semakin tinggi cakupan kode, semakin rendah kemungkinan memiliki bug yang tidak dikenal. Sebagai aturan, semakin tinggi persentase cakupan kode, semakin rendah jumlah waktu yang dibutuhkan untuk menulis tes baru. Namun, ini tergantung pada apakah ada persyaratan perangkat lunak yang tidak lengkap yang tertunda atau jika Anda akan menerima lebih banyak persyaratan di masa mendatang. Selanjutnya, mari kita bahas konsep mengejek. Mocking memungkinkan Anda untuk memisahkan kode yang Anda uji dari dependensi terkait. Dengan kata lain, Anda dapat menggunakan fitur ejekan untuk memastikan bahwa pengujian unit Anda berdiri sendiri. Misalnya, Anda dapat menguji fungsionalitas ujung depan aplikasi web Anda dengan mengejek data seolah-olah datang kembali dari server padahal sebenarnya berasal dari klien. Mocking sangat membantu karena sangat sering aplikasi web dibangun oleh tim pengembang. Beberapa pengembang bekerja pada backend fitur dan yang lain bekerja di ujung depan. Ini bisa mengakibatkan kemacetan. Ambil contoh di mana tim memutuskan untuk membangun fitur baru yang mencantumkan buku alamat pengguna aplikasi di ujung depan. Data terkait pengguna aktual untuk fitur ini akan berasal dari server. Tetapi bagaimana jika pengembang back-end sedikit terlambat dalam mengembangkan bagian fitur mereka? Kemudian pengembang front-end akan terjebak menunggu pengembang back-end menyelesaikan pekerjaan mereka sebelum kode front-end dapat dibangun. Dengan mengejek Anda dapat menghindari kemacetan ini. Mocks, memungkinkan Anda untuk berpura-pura bahwa pengguna sudah ada di sana. Data yang dibutuhkan berasal dari ti ruan daripada dari backend. Hal ini memungkinkan pengembang front-end untuk menyelesaikan situs mereka dari fitur baru secara mandiri. Dalam kasus tertentu, pengembang dapat menggunakan ejekan untuk mengirimkan fitur lebih cepat. Beberapa perpustakaan, seperti sign-on, berfokus secara khusus pada ejekan. Tetapi hal hebat tentang Jest adalah Anda menggunakan fungsi tiruannya tanpa instalasi tambahan. Di Jest Anda menggunakan mengejek dengan menggunakan fungsi tiruan Jest. Juga mudah untuk menguji kode asinkron di Jest. Tidak ada pengaturan yang sulit dan tes yang relatif mudah untuk dikodekan bahkan untuk pendatang baru dalam kerangka kerja. Akhirnya, Jest memungkinkan Anda untuk melakukan pengujian snapshot. Pengujian snapshot digunakan oleh pengembang untuk memverifikasi bahwa tidak ada regresi di DOM aplikasi kami setelah beberapa perubahan pada basis kode dilakukan. Anda sekarang terbiasa dengan konsep pengujian kode JavaScript Anda menggunakan kerangka pengujian Jest. Kerja bagus.