Setiap perangkat lunak dibangun sesuai dengan persyaratan formal atau informal. Tujuan dari persyaratan adalah untuk menjelaskan, dalam bahasa manusia seluk-beluk apa yang dilakukan perangkat lunak. Jadi bagaimana persyaratan terkait dengan praktik pengembangan yang digerakkan oleh uji coba? Izinkan saya menjelaskan pengembangan yang digerakkan oleh uji coba. R T D D D singkatnya adalah proses penulisan kode yang efisien yang akan memenuhi beberapa persyaratan. Mari kita membongkar proses ini sedikit pada tingkat tinggi. Pekerjaan tim pengembangan perangkat lunak terdiri dari persyaratan pener imaan berikut yang akan menjadi fitur aplikasi yang sedang dikembangkan. Menulis tes yang gagal untuk membangun fitur sebelum dibangun. Membuat tes yang gagal ini lulus dengan mengkodekan fitur yang diberikan dibandingkan dengan proses pengembangan tradisional, pendekatan TDD itu mungkin tampak agak terbalik. Saya sekarang akan mendemonstrasikan pendekatan TDD dengan menulis tes yang gagal untuk file javascript dan kemudian menulis kode untuk membuat tes ini lulus untuk memahami cara kerja TDD. Pertimbangkan situasi kehidupan nyata berikut ini. Misalkan Anda harus melakukan tugas, mengendarai mobil Anda untuk bekerja. Anda meninggalkan rumah Anda dan berjalan ke mobil Anda, hanya untuk mengetahui bahwa Anda tidak membawa kunci mobil Anda. Kemudian Anda ingat Anda meninggalkan kunci mobil Anda di kabinet dan Anda lupa mengambilnya apa yang Anda lakukan di sana. Dalam skenario yang dibayangkan ini adalah kebalikan dari TDD. Anda pertama kali berjalan ke mobil Anda dan baru kemudian Anda memeriksa apakah Anda memiliki kunci mobil Anda jika Anda melakukan hal-hal ini menggunakan pendekatan TDD, Anda akan melakukan hal berikut terlebih dahulu. Anda memeriksa atau menguji apakah Anda memiliki kunci bersama Anda. Tes Anda gagal karena Anda tidak memilikinya. Mereka ada di kabinet. Kemudian Anda melakukan tindakan mendapatkan kunci Anda dari kabinet. Terakhir, Anda memeriksa atau menguji apakah Anda memiliki kunci kali ini Anda memilikinya. Jadi tes Anda sekarang lulus. Apa yang dijelaskan di sini adalah inti dari TDD. Mari kita melalui langkah-langkah ini lagi kali ini, berpura-pura bahwa Anda menerapkan TDD dalam kode Anda. Bayangkan Anda perlu menulis kode dengan cara yang digerakkan oleh tes. Karena Anda mengkode TDD dengan cara Anda pertama kali menulis tes, bahkan sebelum Anda menulis implementasi yang sebenarnya, misalnya, Anda menguji apakah fungsi bernama status kunci ada, Anda kemudian menggunakan beberapa fungsi pengujian dari kerangka pengujian. Karena Anda belum menulis implementasi kode sumber Anda. Tes gagal. Selanjutnya Anda menjalankan tes Anda. Tes gagal karena tidak ada status kunci. Fungsi dinyatakan. Logika kode pengujian Anda adalah mengharapkan bahwa status fungsi kunci ada dalam kode sumber Anda. Anda mendeklarasikan fungsi bernama status kunci. Anda menjalankan tes. Sekali lagi, ia memeriksa apakah ada fungsi seperti itu dan mengonfirmasi bahwa itu ada. Jadi tes lulus, penting untuk dicatat bahwa salah satu aturan TDD adalah Anda harus menulis kode sesedikit mungkin untuk membuat tes lulus agar tes ini lulus, cukup dengan mendeklarasikan fungsi dengan nama berikutnya Anda menerima persyaratan lain yaitu sebagai berikut kecuali variabel kunci, yang harus disetel ke true dan konsol mencatat variabel kunci. Jadi persyaratan menyatakan status fungsi kunci harus menerima variabel kunci yang dinyatakan sebelumnya, yang harus disetel ke true. Status kunci kemudian harus mengkonsol mencatat nilai variabel kunci. Jadi Anda menulis tes lain yang gagal lagi karena Anda belum menulis implementasinya, Anda menulisnya dan tes Anda yang sebelumnya gagal sekarang lulus. Akhirnya, Anda memeriksa kode fungsi Anda dan menyadari bahwa lekukan semuanya salah. Ada juga terlalu banyak komentar yang tidak perlu. Jadi, Anda membersihkan kode Anda dan menjalankan pengujian lagi untuk mengonfirmasi bahwa Anda tidak secara tidak sengaja membuat kesalahan. Tes masih lulus, jadi semuanya baik-baik saja. Singkatnya, itulah pendekatan TDD, mari kita bahas sekali lagi. Dalam skenario sebagai anggota tim pengembangan, tugas Anda adalah membaca persyaratan untuk perangkat lunak yang Anda tulis. Persyaratan diberikan kepada Anda oleh manajer proyek. Jadi, Anda mendapatkan tugas pertama Anda untuk hari itu dan mulai mengkodekan cara TDD. Pertama Anda membaca persyaratan baru. Selanjutnya Anda menulis tes yang gagal, kemudian Anda memperbarui kode sumber Anda. Jadi itu menyelesaikan persyaratan Setelah itu Anda menjalankan tes yang lulus Akhirnya, Anda memperhitungkan implementasi Anda. Proses ini biasanya dijelaskan dalam tiga kata. Merah, Hijau. Faktor ulang, merah mewakili tes yang gagal. Hijau di sisi lain, mewakili tes lulus setelah Anda membuat pembaruan ke kode sumber. Faktor re mewakili tweak terakhir pada kode yang tidak mengubah detail implementasi, yang selalu dapat dikonfirmasi dengan menjalankan pengujian berikutnya lainnya ketika diimplementasikan dengan benar. TDD membawa manfaat besar bagi organisasi karena memungkinkan pengujian otomatis dalam proyek platform apa pun tumbuh lebih besar dari waktu ke waktu dan menjadi kompleks. Memastikan bahwa semua tes lulus adalah sinyal kuat bahwa persyaratan saat ini dan semua persyaratan sebelumnya untuk bagian aplikasi Anda telah berhasil dikirimkan dan tidak ada yang rusak. Peng@@ embangan yang digerakkan oleh uji memiliki banyak keuntungan. Berikut adalah beberapa dengan TDD, Anda meminimalkan regresi yang merupakan bug yang tidak disengaja yang diperkenalkan ke kode lama dengan mengkodekan persyaratan baru dan Anda juga memiliki bukti bahwa implementasi baru Anda tidak merusak bagian lain dari aplikasi. Anda dapat mengotomatiskan tes ini dengan mudah dan dengan demikian terus memverifikasi lagi dan lagi bahwa sistem berfungsi seperti yang diharapkan. Anda dapat menguji implementasi Anda dengan berbagai input dan tes menjadi jenis dokumentasi khusus untuk anggota baru tim Anda. Dalam video ini, Anda mempelajari bagaimana pengembangan yang digerakkan oleh tes, r t d d bekerja, Anda juga membahas langkah-langkah yang terlibat dalam pendekatan TDD dan bahwa itu diterapkan dalam siklus faktor re Merah Hijau