Ketika Anda membangun sesuatu, Anda ingin memastikannya berfungsi, dan Anda memastikan bahwa sesuatu berfungsi dengan mengujinya. Sama halnya dengan kode JavaScript. Anda perlu memastikan bahwa kode JavaScript Anda berfungsi sebelum Anda meluncurkannya. Dalam video ini, saya akan menunjukkan kepada Anda bagaimana pengembang web menguji kode JavaScript mereka. Pada akhir video ini, Anda akan dapat: mengidentifikasi berbagai alasan mengapa pengembang ingin menguji kode mereka, menjelaskan bagaimana siklus refactor merah hijau berhubungan dengan pengujian, membedakan antara pengujian manual dan otomatis, dan menunjukkan pemahaman tentang pengujian unit. Bagaimana pengembang web menguji kode mereka? Mari kita cari tahu dengan mengkodekan fungsi ConcatStrings khusus. Misalnya, saya dapat membuat fungsi concatStrings untuk menggabungkan dua string apa pun yang saya berikan. Dalam hal ini, saya ingin fungsi menggabungkan string A dan string B yang diterima sebagai argumen, dan mengembalikan hasilnya. Misalnya, saya bisa menulis concatStrings a, b, c, dan kemudian d, e, f, dan hasil yang dikembalikan adalah abcdef. Ketika fungsi menerima angka 1 dan 2, ia mengembalikan tiga sebagai angka alih-alih string satu dan dua bersama-sama yaitu, 1, 2. Saya juga dapat memberi sinyal apa yang saya ingin fungsi saya lakukan dengan menambahkan komentar ke dalamnya. Menambahkan komentar akan membantu tim saya memahami dan mengingat perilaku yang diharapkan yang saya miliki untuk fungsi tersebut. Penjelasan yang lebih rinci akan menjadi cara yang baik untuk membuatnya lebih jelas tentang apa niat saya untuk setiap argumen. Dalam komentar, saya bahkan dapat menentukan perilaku yang diharapkan ketika nilai tertentu diberikan ke fungsi. Menambahkan komentar adalah langkah ke arah yang benar, tetapi memiliki kelemahan. Ini memungkinkan saya untuk menulis apa pun yang saya suka, jadi tidak ada batasan ambiguitas. Juga, yang umum tidak perlu mengikuti struktur set apa pun. Ada banyak kerangka pengujian khusus yang tersedia di JavaScript. Salah satu kekuatan kerangka kerja tersebut adalah saya tidak perlu menggunakan komentar untuk menggambarkan harapan saya. Sintaks pengujian itu sendiri menjadi pendokumentasian harapan. Ketika saya menulis tes, tes tersebut adalah alternatif yang lebih baik untuk komentar di kode sumber saya karena mereka menentukan harapan apa yang coba dipenuhi oleh kode sumber saya. Tes juga dapat dipanggil, artinya saya dapat menjalankan tes untuk memeriksa apakah harapan terpenuhi. Seperti yang saya tunjukkan sebelumnya, saya dapat menjalankan fungsi concatStrings dengan argumen pertama adalah string abc, dan argumen kedua, string def. Saya kemudian mengharapkan fungsi mengembalikan abcdef, ketika saya memanggilnya. Untuk menulis ini sebagai harapan di beberapa kerangka pengujian seperti JEST, saya dapat menggunakan fungsi yang memiliki nama. Saya kemudian meneruskan panggilan ke fungsi concatStrings dengan argumen spesifik. Kemudian saya menambahkannya ke fungsi, yang merupakan fungsi pengujian lain, dan saya meneruskannya nilai dari apa yang saya har apkan untuk dihasilkan kode ini. Saya pada dasarnya menyatakan bahwa saya berharap panggilan concatStrings dengan abc dan def, akan mengembalikan nilai abcdef. Pengujian dalam JavaScript memungkinkan saya memverifikasi bahwa fungsi tersebut berperilaku seperti yang saya inginkan. Menguji kode dengan cara ini memastikan tiga hal. Keringkasan karena mudah dan langsung ke intinya, karena hanya ada dua panggilan fungsi untuk menjelaskan apa hasil yang diharapkan. Kejelasan, karena Anda tahu persis argumen apa yang Anda berikan, dan pengulangan, karena Anda dapat menjalankannya berulang kali dengan argumen yang sama setiap kali. Sekarang, saya dapat menjalankan beberapa panggilan fungsi menggunakan sintaks ini. Misalnya, saya bisa mengharapkan ConcatStrings 123 dan 456 sebagai argumen, dan kemudian fungsinya dengan argumen 123456, dan dalam setiap contoh, ekspek tasi akan benar, dan kode akan berperilaku seperti yang diharapkan. Dalam terminologi pengujian, Anda akan mengatakan bahwa tes Anda lulus. Tapi saya baru setengah jalan karena masih mungkin dari kode saya untuk gagal dalam ekspektasi. Misalnya, jika saya menjalankan metode dan meneruskannya pemang gilan fungsi concatStrings dengan angka 1 dan 2 sebagai argumen, harapan saya 12 sebagai hasilnya akan gagal. Ini karena ketika saya menggunakan operator plus dengan dua nilai tipe angka, ia melakukan operasi matematika penambahan, alih- alih menggabungkan dua angka bersama-sama untuk membentuk angka 12, seperti akan membentuk abcdef. Jika saya memberikannya argumen abc dan def. Ketika tes gagal, Anda mengatakan bahwa mereka berwarna merah, dan ketika mereka lulus, Anda mengatakan bahwa mereka berwarna hijau. Jika tes gagal, maka itu pertanda bahwa saya perlu menulis kode se demikian rupa sehingga lulus ujiannya. Setelah tes saya lulus, saya perlu meningkatkan kode aplikasi dan kode pengujian, tetapi tanpa mengubah perilaku keduanya. Ini dikenal sebagai refactoring. Refactoring adalah proses di mana saya menulis kode fitur saya sehingga berjalan lebih efisien atau lebih mudah dibaca dan dengan demikian lebih mudah dipahami oleh programmer lain di tim. Ini dilakukan tanpa mempengaruhi hasil yang dihasilkan kode. Satu-satunya perubahan yang jelas mungkin tes itu sendiri membutuhkan lebih sedikit waktu untuk dijalankan karena saya telah mengoptimalkan kode sumber saya. Anda ingin selalu menulis kode Anda dengan cara yang memenuhi semua harapan. Kemungkinan besar beberapa tes Anda akan berwarna merah dan beberapa di antaranya akan berwarna hijau. Tes merah adalah panduan tentang bagaimana Anda perlu meningkatkan kode Anda untuk memenuhi harapan yang belum terpenuhi. Saat Anda terus memperbaiki kode Anda sebagai respons terhadap tes merah, itu menjadi aktivitas siklus. Ini sering digambarkan sebagai siklus refaktor merah-hijau-. Siklus ini adalah dasar dari pengembangan berbasis uji atau pendekatan TDD untuk pemrograman. Izinkan saya menjelaskan pendekatan TDD. Pertama, Anda menulis tes yang gagal, kemudian Anda menulis kode sumber Anda sehingga tes yang sebelumnya gagal sekarang lulus. Akhirnya, Anda mengoptimalkan kode sumber Anda tanpa mengubah hasilnya. Ada banyak keuntungan memiliki kode yang menguji kode lain. Misalnya, Anda dapat menjalankannya sebanyak yang Anda inginkan. Anda dapat menjalankan kode pengujian secara otomatis. Tes dapat diulang tanpa biaya waktu atau usaha yang signifikan. Singkatnya, pengujian adalah bagaimana Anda memverifikasi harapan yang Anda miliki mengenai perilaku kode Anda.