Dalam pemrograman, ada sesuatu yang dikenal sebagai paradigma pemrograman. Anda dapat menganggap ini sebagai klasifikasi, gaya atau hanya cara umum untuk menulis kode. Anda mungkin sudah akrab dengan salah satu paradigma ini. Pemrograman fungsional, dalam video ini, Anda akan belajar tentang yang populer lainnya. Paradigma pemrograman berorientasi objek, sering disebut sebagai OOP. OOP berkisar pada gagasan mengatur program kami menggunakan objek untuk mengelompokkan data dan fungsionalitas terkait. Ini berbeda dengan pendekatan pemrograman fungsional, di mana data yang digunakan dalam aplikasi perlu disimpan terpisah dari fungsi yang beroperasi pada data tersebut. Mari kita jelajahi konsep ini lebih lanjut menggunakan beberapa contoh kode dari dua paradigma, misalkan kita diminta untuk menulis beberapa kode yang menghitung total biaya membeli sepasang sepatu. Kode perlu menghitung harga total yang merupakan sepatu dikalikan dengan jumlah pajak. Untuk membuat kode solusi ini, Anda memutuskan bahwa Anda memerlukan variabel untuk menyimpan nilai sepatu dan pajak dan harga total. Anda memerlukan fungsi yang akan Anda sebut harga total untuk melakukan perhitungan mengalikan sepatu dengan pajak. Akhirnya, Anda harus dapat menampilkan hasilnya. Dengan menggunakan pendekatan pemrograman fungsional, Anda dengan jelas memisahkan data program dari fungsi yang bekerja pada data itu. Dengan pendekatan OOP, Anda membuat objek dan menyimpan semua data yang terkait dengan objek tersebut termasuk variabel, fungsi dan pernyataan output. Misalnya, Anda membuat objek bernama buy one. Anda mungkin ingat bahwa fungsi di dalam objek dikenal sebagai metode. Sekarang pembelian 1 objek dibuat. Anda mengakses metode harga total pada objek purchase1 menggunakan notasi titik. Kemudian, Anda memanggil metode harga total yang bekerja dengan data di dalam objek pembelian 1 dan mengembalikan hasil 120. Bahkan, Anda dapat mengakses data apa pun yang dimiliki objek pembelian 1. Misalnya, menggunakan notasi titik, Anda dapat mengakses data harga sepatu dan data pajak negara bagian. Keuntungan menggunakan pendekatan oOP adalah Anda dapat membangun objek sebanyak yang Anda butuhkan. Misalnya, Anda dapat membangun objek pembelian lain dan menamainya purchase2. Setelah dibuat, Anda juga dapat mengakses metode harga total pada objek purchase2 seperti yang Anda lakukan pada objek pembelian 1 sebelumnya. Anda mungkin memperhatikan, bahwa metode harga total hampir sama di objek pembelian 1 dan pembelian 2. Ini berarti Anda dapat meningkatkan objek sehingga kedua metode identik. Dan Anda dapat melakukannya dengan menggunakan kata kunci ini yang mungkin Anda ingat. Ini pada dasarnya berarti objek ini. Penting untuk dicatat bahwa kode masih berfungsi persis sama seperti sebelumnya. Oke, jadi Anda mungkin bertanya-tanya mengapa saya mengalami kesulitan memperbarui kode pembelian 1 dot pilih harga ke harga pilih titik ini. Nah, keuntungannya di sini adalah bahwa daripada harus memikirkan nama objek yang properti dengan harga sepatu yang saya coba akses, saya hanya menggunakan alias dari nama objek saat ini, yaitu kata kunci ini. Dan sekarang saya bisa menyalin metode harga total dari objek beli 1 dan menggunakannya kembali di objek pembelian 2. Jadi, menggunakan kata kunci ini memungkinkan saya untuk tidak terlalu peduli dengan nama objek saat ini, yang merupakan peningkatan dari kode sebelumnya yang saya miliki. Namun, programmer selalu ingin menghindari pemborosan sumber daya saat menulis kode. Dan mengkodekan metode khusus pada setiap objek yang saya buat itu boros. Solusi untuk ini adalah mengkodekan objek saya menggunakan semacam templat. Anda akan belajar cara membuat ini nanti dalam pelajaran ini menggunakan sesuatu yang disebut kelas. Untuk saat ini, mari kita jelajahi prinsip-prinsip pemrograman berorientasi objek dengan contoh menghitung total biaya membeli sepasang sepatu. Sebelum memulai, mari kita dengan cepat meninjau kembali gaya pemrograman lain. Pemrograman fungsional , ini akan membantu Anda memahami perbedaan antara dua paradigma. Saya mulai dengan sepatu var sama dengan 100 dan saya juga menambahkan pajak negara bagian var sama dengan 1,2. Selanjutnya, saya mendeklarasikan fungsi, yang mengembalikan nilai sepatu dikalikan dengan nilai pajak. Ini ditulis sebagai harga total fungsi, dengan sepatu dan pajak dalam tanda kurung. Di dalam kawat gigi keriting, saya menambahkan sepatu pengembalian, pajak asterix. Sekarang, saya mendeklarasikan variabel yang akan dibayar yang memanggil fungsi harga total dan meneruskan nilai variabel sepatu serta nilai variabel pajak negara bagian. Akhirnya, saya membatalkan log variabel to pay. Ketika saya menjalankan kode, outputnya adalah 120. Jadi itu adalah contoh paradigma fungsional. Tapi kali ini mari kita membangun sesuatu yang mirip dengan paradigma OOP. Saya pergi ke file terpisah tempat saya mendeklarasikan variabel, membeli 1 dan menyimpan objek literal di dalamnya dengan kurung kurung keriting. Saya tidak menambahkan sepatu properti dan mengaturnya ke 100, diikuti oleh pajak negara bagian, yang diatur ke 1.2. Properti terakhir adalah harga total, yang diatur ke fungsi untuk mendeklarasikan variabel perhitungan. Variabel ini sama dengan properti purchase1 dot shoes dikalikan dengan properti pajak negara bagian pembelian 1 dot. Bagian ke-2 dari konsol fungsi mencatat harga total string bersama dengan nilai variabel perhitungan. Online 10, saya memanggil fungsi dengan tanda kurung harga total pembelian 1 titik. Yang saya harapkan untuk mengembalikan nilai 120. Saya menjalankan kode dan itulah yang saya dapatkan. Pada file lain, saya akan membangun contoh OOP lain, yang ini dimulai dengan variabel pembelian 2, yang memiliki struktur yang sama dengan pembelian 1. Namun, nilai sepatu itu diubah menjadi 50. Dalam fungsi harga total, variabel perhitungan diperbarui untuk mengakses sepatu dan properti pajak negara bagian dari pembelian 2. Ketika saya memanggil metode harga total pada objek pembelian 2 dan menjalankan kode, Ini mengembalikan nilai 60. Di antara dua contoh OOP ini, Anda mungkin telah memperhatikan bahwa selain mengakses sepatu dan properti pajak negara di objek yang berbeda,. Kedua metode ini benar-benar sama. Ini berarti bahwa saya dapat meningkatkan objek saya untuk membuat kedua metode identik sambil mendapatkan hasil yang sama. Saya dapat melakukan ini menggunakan kata kunci ini yang pada dasarnya berarti objek ini. Mari kita pindah ke file lain, untuk memeriksa cara kerjanya. Dalam file ini, saya memiliki pembelian yang sama 1 dan membeli 2 objek dari sebelumnya dengan semua nilai yang sama. dalam fungsi harga total pembelian 1, saya mengganti referensi untuk membeli 1 dengan kata kunci ini. Saya kemudian dapat menyalin metode harga total dari purchase1 dan menempelkannya ke objek pembelian 2, karena sekarang identik. Saya menjalankan kode ini dan memberi saya harga total 120 untuk pembelian 1 dan 60 untuk pembelian 2. Ini adalah peningkatan, dibandingkan kode asli saya dari perspektif mengurangi limbah. Alih-alih menulis metode khusus untuk setiap objek, pendekatan ini memungkinkan untuk menggunakan kembali kode yang ada. Namun, meskipun saya menggunakan kembali kode yang ada, saya sekarang mengulangi metode yang sama pada setiap objek baru yang dibangun. Itu boros dan program harus efisien. Di sinilah pembuatan templat untuk objek masuk. Dalam JavaScript, salah satu cara paling elegan untuk membangun objek baru secara efisien adalah dengan menggunakan kelas. Selamat. Dalam video ini, Anda belajar tentang pemrograman berorientasi objek dan bagaimana itu berbeda dari pemrograman fungsional. Dengan pendekatan berorientasi objek, Anda dapat membuat kode lebih efisien dengan menggunakan kembali kode yang ada.