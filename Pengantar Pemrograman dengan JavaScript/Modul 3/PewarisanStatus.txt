Di dunia nyata, mewarisi sesuatu berarti memperoleh kepemilikan, meng kondisikan perdagangan kita dari generasi sebelumnya. Dalam video ini Anda akan belajar bahwa pewarisan juga ada di JavaScript dan model pewarisan berputar di sekitar sesuatu yang disebut prototipe. Anda mungkin juga akrab dengan konsep prototipe yang sering disebut sebagai model asli dari mana bentuk lain dikembangkan. Dalam JavaScript, prototipe adalah objek yang dapat menyimpan properti untuk di bagikan oleh beberapa objek lain. Dan ini adalah dasar dari bagaimana warisan bekerja di JavaScript. Inilah sebabnya mengapa kadang-kadang dikatakan bahwa JavaScript mengimplementasikan prototipe model pewarisan. Mari kita jelajahi ini lebih jauh sekarang, dengan beberapa contoh kode untuk menunjukkan pewarisan dan bagaimana membangun prototipe. Pertimbangkan objek berikut. Saya mengatur burung var ke objek yang memiliki tiga properti. Setiap set ke nilai boolean true. Sifatnya memiliki sayap bisa terbang dan memiliki bulu. Menggunakan objek yang tersedia buat, saya dapat membuat objek baru. Misalnya, saya telah menyetel variabel eagle1 ke panggilan yang mengambil objek burung dan menerus kannya ke metode object .create. Saya dapat mengonsol mencatat konten objek eagle1 sekarang. Mari kita jalankan kode dan perhatikan objek kosong yang masuk ke konsol. Namun, karena saya menggunakan objek untuk membuat instance objek eagle1. Saya juga memiliki akses ke semua properti objek burung. Jadi saya membatalkan log eagle1 memiliki sayap dan pass eagle1.has sayap. Dan saya juga menghibur log eagle1 bisa terbang dan melewati eagle1.can fly. Dan akhirnya elang1 memiliki bulu yang melewatinya elang1. memiliki bulu. Mari kita baca dari kode sekali lagi perhatikan elang1 memiliki sayap yang benar, elang1 bisa terbang benar dan elang1 memiliki bulu yang benar. Output kami ke konsol dengan objek membuat sintaks. Saya dapat membangun objek sebanyak yang saya inginkan dan mereka semua akan memiliki objek burung sebagai prototipe mereka. Di sini, perhatikan bahwa saya membuat objek eagle2 dan saya telah menggunakan objek burung sebagai prototipe. Karena saya menjalankan metode object .create di atasnya dan saya menyimpan semuanya ke variabel eagle2. Penting untuk dipahami bahwa objek eagle2 juga memiliki akses ke properti yang disimpan pada objek burung sebagai prototipenya. Mari kita jalankan kode ini untuk mengonfirmasi dan memang perhatikan bahwa eagle2 memiliki sayap true adalah output ke konsol. Saya bahkan dapat menambahkan objek yang berbeda dengan perilaku yang berbeda. Misalnya, saya dapat menambahkan objek penguin1. Saya melakukan ini dengan mendeklarasikan variabel penguin1 dan menetapkan hasil metode objek .create untuknya. Penguin adalah burung yang tidak bisa terbang jadi saya ingin mengatur properti can fly ke false. Untungnya, ini adalah proses yang relatif mudah karena JavaScript dimulai dari objek itu sendiri ketika mencari properti untuk dikerjakan. Kemudian jika tidak dapat menemukannya di objek, ia mencari prototipenya. Penting untuk diingat bahwa ia tidak melihat lebih jauh jika menemukan properti pada objek langsung. Ini membuat mekanisme sederhana untuk mengesampingkan properti yang diwariskan. Jadi mari kita terapkan ini sekarang. Pertama saya mengatur properti can fly pada objek penguin1 ke false. Dan sekarang saya dapat membatalkan log objek penguin1 itu. Perhatikan output ke konsol setelah menjalankan kode adalah bahwa penguin1 adalah objek dengan properti can fly yang disetel ke false. Selain itu, saya masih dapat mengakses semua properti prototipe. Jadi mengakses yang memiliki bulu dan sifat bisa terbang dari penguin1 akan mengembalikan nilai yang disimpan pada prototipe ketika saya menjalankan kode. Namun, properti can fly sekarang diatur pada objek penguin1 itu sendiri, sehingga menggantikan properti can fly pada prototipe. Peng@@ gantian ini hanya memengaruhi objek penguin1, itu tidak mengubah prototipe saya atau objek elang lainnya. Dalam video ini, Anda belajar tentang pewarisan dalam JavaScript, meskipun dimungkinkan untuk membangun warisan menggunakan metode pembuatan objek. Mungkin lebih baik menggunakan sintaks kelas untuk objek dan pewarisan yang lebih kompleks. Meskipun di bawah tenda, sintaks ini masih berfungsi dengan prototipe. Masuk akal untuk menggunakan kelas karena mereka meningkatkan pengalaman pengembang dalam skenario yang lebih kompleks.