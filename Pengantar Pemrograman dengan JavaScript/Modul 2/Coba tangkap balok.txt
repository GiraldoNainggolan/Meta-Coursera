Pernahkah Anda menonton dua orang bermain game tangkapan? Ini adalah permainan yang cukup sederhana. Satu pemain melempar bola dan yang lainnya mencoba menangkapnya. Anda mungkin ingat bahwa ketika kode Anda berisi kesalahan, itu berhenti berjalan. Nah, dalam JavaScript, ada beberapa pernyataan bawaan untuk membantu kode Anda terus berjalan bahkan jika terjadi kesalahan. Mereka juga menggunakan kata kunci seperti lempar dan tangkap. Namun mereka mencoba menangkap kesalahan alih-alih bola. Dalam video ini, Anda akan belajar tentang pernyataan drop, try and catch dan bagaimana mereka dapat digunakan untuk bekerja dengan kesalahan dalam JavaScript dan mencegah kode Anda berhenti. Proses ini lebih dikenal sebagai penanganan kesalahan. Pertama, mari kita jelajahi pernyataan try, catch yang menggunakan kata kunci, coba dan tangkap. Jika sepotong kode menimbulkan kesalahan, itu bisa terbungkus di dalam blok percobaan. Kemudian Anda dapat menangkap kesalahan dengan blok tangkapan, dan menggunakannya untuk melakukan sesuatu. Misalnya, keluarkan pesan kesalahan ke konsol. Kata kunci lain yang perlu Anda ketahui adalah kata kunci throw. Dengan menggunakan kata kunci throw, Anda dapat memaksa kesalahan untuk dilemparkan dari blok try ke blok catch. Penting untuk diingat bahwa Anda dapat menggunakan kata kunci throw di luar blok try, tetapi tidak mungkin untuk menangkapnya. Blok catch menerima sesuatu yang disebut kesalahan yang merupakan objek. Ini adalah kesalahan aktual yang dilemparkan dari blok try. Meskipun Anda dapat menamainya apa pun yang Anda suka, yang terbaik adalah membuatnya singkat dan bermakna. dalam hal ini saya menamakannya Err. Izinkan saya menunjukkan bagaimana ini bekerja lebih lanjut dengan beberapa contoh kode. Mari kita tentukan blok kode yang akan diuji untuk kesalahan menggunakan pernyataan try catch. Oke, jadi saya membuka kode studio visual dan file JavaScript dengan beberapa kode sampel. Jika saya menjalankan kode ini sekarang, itu akan mengembalikan kesalahan dan berhenti bekerja. Ini karena baris pertama menggunakan log konsol untuk mengeluarkan a+b. Tetapi variabel ini tidak dideklarasikan di mana pun. Baris kedua memiliki log konsol untuk menampilkan string. Garis ini tidak pernah tercapai dan pernyataan ini terlihat gratis. Ketika saya mengklik tombol jalankan, kesalahan referensi dihasilkan, memberi tahu saya bahwa a tidak ditentukan. Mesin JavaScript kemudian berhenti segera dan tidak memproses baris ke-2. Bukan hanya JavaScript yang menimbulkan kesalahan dalam program kami, Anda benar-benar dapat membuangnya dengan sengaja. Hal ini dilakukan dengan mengetikkan kata kunci drop diikuti oleh kata kunci baru dan kemudian konstruktor kesalahan tertentu. Dalam hal ini saya menggunakan konstruktor kesalahan referensi dengan sepasang tanda kurung di akhir. Ketika saya menjalankan kode kali ini saya mendapatkan output kesalahan referensi lagi. Jadi bagaimana kita bisa mencegah kesalahan menghentikan program kita? Di sin@@ ilah sintaks try catch membuat dirinya berguna. Mari kita pergi ke file terpisah dengan kode yang menunjukkan cara kerjanya. Tapi pertama-tama mari kita uraikan struktur kode. Blok coba dimulai dengan kata kunci try. Dan di dalam kurung kurung keriting, Anda menempatkan kode yang menurut Anda akan menimbulkan kesalahan. Berikutnya adalah blok catch yang menangkap kesalahan yang dihasilkan blok try. Ini dimulai dengan kata kunci catch dan dalam tanda kurung Anda memiliki built-in atau objek yang dapat Anda beri nama apa pun yang Anda suka. Tapi di sini saya telah menggunakan err. Di dalam kurung kurung keriting, Anda menempatkan kode yang ingin Anda jalankan. Dalam contoh ini, blok try berisi pernyataan log konsol yang sama seperti sebelumnya untuk menghasilkan a+b. Blok catch berisi log konsol untuk menghasilkan dua string. Ada kesalahan dan kesalahan disimpan di log kesalahan. Akhirnya, setelah blok tangkapan, log konsol lain mengeluarkan string, program saya tidak berhenti. Manfaat menggunakan try catch adalah bahwa meskipun JavaScript melempar kesalahan saat membaca kode kami, itu tidak akan menghentikan eksekusi program. Untuk menunjukkan itu mari kita jalankan contoh kode kita. Perhatikan lagi kesalahan referensi adalah output yang menyatakan bahwa a tidak ditentukan, dan kemudian dua string dari blok catch kami. Penting untuk dipahami di sini bahwa kesalahan adalah output karena saya mencatatnya ke konsol. Output string setelah pesan kesalahan yang membuktikan program kami terus berjalan. Akhirnya izinkan saya mengganti tab ke file lain, dan menunjukkan bagaimana JavaScript merespons ketika saya secara manual membuat kesalahan. Dalam contoh ini, blok try berisi pernyataan throw untuk melempar kesalahan referensi baru. Di blok tangkapan ada dua log konsol. Yang pertama mengeluarkan objek kesalahan dan yang kedua mengeluarkan string, ada kesalahan referensi. Di luar blok try catch, program diakhiri dengan log konsol untuk menampilkan string, Program saya tidak berhenti. Ketika saya menjalankan kode ini, perhatikan bahwa kesalahan referensi adalah output. Ini adalah kesalahan yang dilemparkan di blok try dan kemudian dikeluarkan menggunakan objek kesalahan di blok catch. Sekali lagi, ini hanya kesalahan yang dihasilkan. Kode tidak berhenti berjalan. Dan saya dapat mengonfirmasi ini karena pesan log konsol terakhir dikeluarkan ke konsol. Dalam video ini, Anda telah mempelajari cara bekerja dengan kesalahan dalam JavaScript. Anda belajar bagaimana Anda dapat menggunakan try and catch block dan kata kunci throw untuk menghadapinya. Lain kali Anda melihat permainan tangkapan, pikirkan bagaimana Anda dapat menggunakan mekanisme serupa untuk membantu menangkap kesalahan dalam kode Anda.