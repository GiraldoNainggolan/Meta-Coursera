Bayangkan sebuah restoran telah dipesan untuk resepsi pernikahan, dan hari besar akhirnya tiba. Sayangnya, tidak semuanya berjalan lancar dan tampaknya banyak tamu yang diharapkan belum tiba. Bagaimana kita tahu bahwa kursi kosong harus diisi dengan tamu? Ini sesederhana menempatkan tanda kecil di setiap meja. Masing-masing memberi tahu kita bahwa seseorang saat ini tidak ada di sini, tetapi seseorang harus ada di sini. Dalam JavaScript, ada situasi serupa di mana Anda perlu menandai tempat di mana nilai atau objek harus ada. Dalam video ini, Anda akan belajar tentang tiga jenis nilai kosong: tipe data null, tipe data yang tidak ditentukan, dan string kosong. Saya juga akan mendemonstrasikan beberapa skenario di mana Anda dapat mengharapkan untuk menemukan nilai-nilai ini. Kita akan mulai dengan tipe data null. Null mewakili tidak adanya nilai objek yang disengaja. Ini juga merupakan nilai pengembalian dari beberapa metode JavaScript bawaan. Misalnya, katakanlah Anda membuat variabel bernama huruf dan menetapkannya nilai string abc. Anda ingin mencari huruf a di string. Anda dapat melakukan ini dengan menggunakan metode pencocokan untuk mencari di dalam variabel. Ini mengembalikan array dengan beberapa informasi, tetapi bagian yang paling penting adalah mengonfirmasi bahwa a ditemukan dalam string. K@@ ali ini, mari kita gunakan metode yang sama pada huruf yang berbeda, huruf d. Nilai pengembalian dari metode match harus berupa array, yang merupakan objek dalam JavaScript, tetapi karena huruf d tidak dapat ditemukan, array dengan hasilnya tidak dapat dibangun, jadi null muncul sebagai gantinya untuk menunjukkan tidak adanya objek. Dalam JavaScript, mungkin juga ada saat-saat ketika Anda membangun sesuatu yang belum didefinisikan dengan jelas sehingga Anda tidak dapat menetapkan nilai untuk itu. Untungnya, ada cara untuk menyimpannya sehingga Anda dapat menetapkannya nanti menggunakan tipe data yang tidak ditentukan. Sementara beberapa tipe data dalam JavaScript dapat menyimpan banyak nilai yang mungkin, yang lain dibatasi hanya untuk beberapa. Misalnya, tipe data string dapat menampung kombinasi karakter yang hampir tak terbatas sementara tipe data Boolean terbatas pada nilai true atau false. Tipe data yang tidak ditentukan hanya dapat menyimpan satu nilai, tidak ditentukan. Anda mungkin ingat melihat ini dalam kode praktik Anda. Misalnya, semua fungsi mengembalikan undefined secara default kecuali telah diputuskan untuk mengembalikan nilai tertentu sebagai gantinya. Ketika Anda menggunakan console.log untuk menampilkan sesuatu seperti nama, Anda akan melihat undefined ditampilkan setelah output. Ini karena console.log adalah fungsi dan Anda tidak mengembalikan nilai. Situasi umum lainnya di mana nilai yang tidak ditentukan muncul adalah ketika variabel di deklarasikan tanpa penugasan. Misalnya, misalkan saya membuat variabel bernama noise, tetapi tidak memberikannya nilai. Anda mungkin ingat bahwa ini adalah JavaScript yang valid dan kode akan berjalan. Namun, karena variabel belum diberi nilai, JavaScript secara otomatis menetapkan nilai undefined. Kita bahkan bisa mengeksplorasi ini lebih jauh. Misalnya, katakanlah Anda menggunakan konsol. untuk mengeluarkan noise variabel yang tidak ditetapkan. Kemudian pada baris di bawah ini, Anda menetapkan variabel noise nilai string guntur. Apa yang akan terjadi jika Anda kemudian menampilkan variabel ini lagi ke konsol? Konsol akan mengeluarkan guntur string. Ini berarti hanya contoh setelah deklarasi mengambil nilai yang ditetapkan. Bahkan jika deklarasi menetapkan nilai, setiap penggunaan variabel sebelum deklarasi masih akan mengembalikan undefined. Meskipun penting untuk memahami perilaku ini, biasanya praktik terbaik adalah selalu menetapkan variabel Anda dengan nilai saat Anda mendeklarasikannya. Seperti yang mungkin Anda perhatikan, JavaScript memberi Anda beberapa fleksibilitas, tetapi Anda masih memiliki keterbatasan. Misalnya, jika Anda mencoba console.log variabel yang belum dideklarasikan di seluruh kode Anda, eksekusi program Anda akan berhenti, dan alih-alih tidak ditentukan, kesalahan referensi akan dihasilkan. Salah satu cara untuk memikirkannya adalah bahwa tipe data yang tidak ditentukan bertindak seperti placeholder untuk nilai yang diketahui oleh mesin JavaScript. Hanya saja belum ditentukan. Skenario lain dari undefined adalah ketika Anda mencoba mengakses properti objek yang tidak ada. Misalnya, katakanlah Anda memiliki objek permainan dengan skor properti yang memiliki nilai 1.000. Properti berisi semua kata huruf kecil. Katakanlah Anda mencoba mengakses properti ini, tetapi Anda membuat kesalahan ejaan dan skor ejaan dengan huruf besar S. JavaScript tidak dapat menemukan apa pun dengan informasi ini, jadi ini memberi Anda nilai undefined sebagai gantinya. Akhirnya, mari kita jelajahi nilai kosong terakhir, yang mungkin sudah Anda kenal, string kosong. Ini adalah string tanpa karakter di dalamnya dan dapat dibangun dengan beberapa cara, seperti dengan tanda kutip tunggal atau tanda ku tip ganda tanpa karakter di antara keduanya. Dalam video ini, Anda belajar tentang perbedaan antara string null, undefined, dan kosong, serta beberapa situasi umum di mana string tersebut muncul.