Dalam kehidupan kita sehari-hari, ada kalanya kita harus mengulangi beberapa aktivitas lagi dan lagi. Misalnya, menutup setiap tombol saat mengenakan kemeja, mencuci setumpuk piring satu per satu, atau menghitung mundur dari sepuluh ke satu sebelum menyanyikan Selamat Tahun Baru. Tugas berulang adalah kehidupan yang efektif, dan terkadang kita juga perlu melakukannya dalam kode JavaScript kita. Dalam video ini, Anda akan belajar tentang konstruksi perulangan dan bagaimana mereka dapat digunakan untuk melakukan tugas berulang. Ingat pernyataan IF bersyarat yang mengeksekusi blok kode jika kondisi tertentu terpenuhi, urutan ini hanya berjalan sekali. Bagaimana jika Anda perlu melakukan ini beberapa kali? Nah, untuk melakukan ini Anda perlu melakukan sesuatu yang disebut loop. Dalam JavaScript, pengembang menggunakan loop untuk terus mengeksekusi blok kode berulang sampai kondisi tertentu terpenuhi. Loop mirip dengan kondisional dan suatu kondisi harus dipenuhi agar kode dapat dieksekusi. Tetapi loop memiliki parameter tambahan, yang memiliki banyak nama. Tetapi untuk saat ini, Anda dapat menganggap ini sebagai penghitung tambahan atau loop. Untuk memahami mengapa variabel penghitung begitu penting, mari kita pertimbangkan situasi kehidupan nyata. Kami menghitung mundur dari 10-1, sebelum menyanyikan Selamat Tahun Baru. Dengan kata lain, hanya setelah kita menyelesaikan penghitungan, kita bisa mulai bernyanyi. Yang kita lawan perlu menjadi nilai tertentu, satu dan hanya setelah itu, kita bisa menyanyikan lagu. Dalam JavaScript, penghitung dapat berupa variabel atau angka apa pun tetapi dalam pemrograman, adalah umum untuk menggunakan huruf I. Peran penghitung sangat penting di sini, karena, tanpa itu, loop Anda tidak akan tahu kapan harus memulai atau kapan harus mengakhiri, dan dapat berjalan tanpa batas waktu. Ini dikenal sebagai loop tak terbatas. Misalnya, katakanlah Anda ingin memprogram urutan hitungan seperti 1,2,3. Anda dapat melakukan ini hanya dengan menggunakan metode console.log. Namun, pada dasarnya kami melakukan aktivitas yang sama di sini. Satu-satunya perbedaan adalah bahwa kami mengubah nomor yang sedang dicatat ke konsol. Dengan menggunakan loop, kita dapat melakukan tugas yang sama dengan lebih efisien dan menggunakan lebih sedikit baris kode. Meskipun ini mungkin tampak seperti keuntungan minimal untuk menghitung sampai tiga, bayangkan menghitung hingga 100. Dengan menggunakan loop, Anda dapat mencapai ini dengan tiga baris kode yang sama persis. Anda hanya perlu memperbarui kondisinya. Ada banyak jenis loop, seperti loop for, loop while , dan loop bersarang. Anda akan belajar tentang loop bersarang nanti dalam pelajaran ini. Untuk saat ini, mari kita jelajahi ujung jauh while loop. Pertama adalah for-loop, yang digunakan untuk mengulang blok kode beberapa kali. For-loop adalah loop terstruktur dengan struktur kondisional tertentu di mana variabel penghitung harus diatur. Kemudian suatu kondisi harus ditentukan dan akhirnya, penghitung harus ditingkatkan. Ini bisa berupa peningkatan atau penurunan tergantung pada kebutuhan Anda. Loop while mirip dengan for-loop. Ini juga akan berjalan selama kondisinya kembali true. Namun, penghitung awal diatur di luar loop while dan penambahan dilakukan di dalam tubuh loop. Selamat. Dalam video ini, Anda belajar tentang konstruksi loop menggunakan loop far and while. Meskipun Anda dapat mencapai hasil yang sama menggunakan loop for atau while sebagai pengembang pemula, Anda mungkin merasa lebih mudah untuk bekerja dengan for-loop. Ini karena loop mandiri dengan semua logika loop di satu tempat. Selain itu, selalu ingat untuk memperbarui nilai penghitung, jika tidak, loop mungkin berulang selamanya.