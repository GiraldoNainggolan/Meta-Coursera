Katakanlah Anda ingin membuat kode hitungan dari 1-3, dan kemudian katakan go seolah-olah kita sedang menghapus. Anda dapat melakukan ini dengan mencatat setiap langkah ke konsol untuk 1, 2, 3 dan pergi. Sementara metode ini berfungsi, bayangkan situasi di mana Anda harus menghitung dari 1-10, 1-100, atau bahkan lebih, di mana kita harus mengetik metode dialog konsol 100 kali. Untungnya ada cara yang lebih efisien untuk melakukan ini dengan menggunakan sesuatu yang disebut for-loop. Izinkan saya menjelaskan saran saya dan menempelkan contoh bagaimana melakukan ini menggunakan for-loop. Pertama adalah deklarasi menggunakan kata kunci for. Deklarasi ini terdiri dari sesuatu yang dikenal sebagai penghitung. Penghitung adalah variabel yang biasanya diberi nama i untuk iterator, tetapi Anda dapat menggunakan nama variabel apa pun yang Anda inginkan. Penghitung memiliki tiga kondisi agar for-loop berfungsi. Pertama, nilai hitungan awal harus ditetapkan, dalam contoh ini satu. Kondisi kedua adalah nilai penghitungan akhir. Ini menentukan berapa kali loop akan berulang atau dijalankan. Dalam contoh ini, kondisinya adalah bahwa nilai i harus kurang dari atau sama dengan tiga agar loop dapat dijalankan. Bagian terakhir adalah incrementor yang mengubah nilai i pada setiap loop. Ini diatur untuk meningkatkan jumlah yang disimpan dalam variabel i dengan satu, setiap kali kode di dalam loop berjalan. Anda mungkin telah mempelajari teknik i sama dengan i plus 1, tetapi Anda juga dapat menggunakan sintaks i plus plus sebagai cara lain untuk meningkatkan nilai i satu per satu. Jika Anda tidak menentukan bagaimana nilai i harus ditingkatkan setelah setiap loop, loop for akan berjalan selamanya, karena i akan selalu kurang dari tiga. Anda membutuhkan sesuatu yang dikenal sebagai kondisi keluar. Kondisi keluar bekerja dengan incrementor untuk mencegah loop berjalan selamanya dengan menentukan nilai mana untuk mengakhiri loop. Dalam contoh ini, loop berakhir ketika nilai i lebih besar dari tiga. Loop akan berakhir ketika kondisi keluar mengembalikan false. Dengan kata lain, sampai nilai i sama dengan 4. Karena 4 kurang dari atau lebih besar dari 3 mengembalikan false, for-loop akan keluar dan JavaScript akan terus membaca dan menjalankan kode di bawahnya. Bagian terakhir dari for-loop adalah loop-body yang tertutup dalam kurung kurung keriting. Ini berisi blok kode yang ingin saya jalankan pada setiap iterasi loop. Dalam contoh ini, saya ingin mencetak nilai i ke konsol menggunakan metode console-dialog. Perhatikan bahwa kode ini menghasilkan hasil yang sama seperti yang ditampilkan sebelumnya. Nah, mari kita lihat dalam sebuah aksi. Bagus, Anda baru saja membuat for loop pertama Anda. Ada berbagai cara yang dapat Anda gunakan untuk loop. Misalnya, saya bisa memulai hitungan saya pada 10 dan mengatur nilai i menjadi lebih besar dari nol. Sekarang, alih-alih menambah nilai i dengan plus plus, saya dapat mengurangi dengan nilai minus minus. Ini pada dasarnya seperti menghitung mundur. Alih-alih mengatakan pergi, kita bisa mengatakan Selamat Tahun Baru. Saya menekan, “Enter,” dan ada hasilnya. Output hitung mundur dari 10-1 dan salam, Selamat Tahun Baru ditampilkan. Mari kita uraikan apa yang terjadi di sini. Bagian dialog-konsol dari for-loop diulang 10 kali sampai nilai i mencapai nol. Setelah nilai i mencapai nol, kondisi i lebih besar dari 0 tidak lagi terpenuhi dan loop keluar. Ingat, for-loop adalah cara untuk mengotomatiskan pengulangan dalam JavaScript. Mengapa tidak mencoba membuat satu dalam kode Anda sendiri untuk mengulangi beberapa kode.